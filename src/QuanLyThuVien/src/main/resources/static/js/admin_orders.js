// üÜï T√°ch API base URL (n·∫øu backend c√≥ host ri√™ng, d·ªÖ m·ªü r·ªông sau)
const BASE_URL = ""; // v√≠ d·ª•: "http://localhost:8080"
const ORDER_API = `${BASE_URL}/order/get-all-order`;
const CONFIRM_API = `${BASE_URL}/order/admin-confirm/`;
const REJECT_API = `${BASE_URL}/order/admin-reject/`; // üÜï th√™m API t·ª´ ch·ªëi ƒë∆°n

// üîÑ H√†m load danh s√°ch ƒë∆°n h√†ng
async function loadOrders() {
    try {
        const response = await fetch(ORDER_API);
        const result = await response.json();

        if (result.code === 1000) {
            const tbody = document.querySelector("#orderTable tbody");
            tbody.innerHTML = "";

            result.data.forEach(order => {
                // üÜï Chu·∫©n h√≥a format ng√†y v√† tr·∫°ng th√°i
                const orderDate = new Date(order.orderDate).toLocaleString("vi-VN");
                const statusColor = order.orderStatus === "CONFIRMED" ? "green" :
                                    order.orderStatus === "REJECTED" ? "red" : "orange";

                const row = `
                    <tr>
                        <td>${order.id}</td>
                        <td>${order.address}</td>
                        <td>${order.totalPrice} $</td>
                        <td>${order.paymentType}</td>
                        <td>${orderDate}</td>
                        <td style="color:${statusColor}; font-weight:bold;">
                            ${order.orderStatus}
                        </td>
                        <td>
                            <button onclick="viewDetail('${order.id}')">üëÅ Xem</button>
                        </td>
                        <td>
                            <button class="btn-update" onclick="confirmOrder('${order.id}')">‚úÖ X√°c Nh·∫≠n</button>
                            <button class="btn-delete" onclick="rejectOrder('${order.id}')">‚ùå T·ª´ Ch·ªëi</button>
                        </td>
                    </tr>
                `;
                tbody.innerHTML += row;
            });
        } else {
            console.error("Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch ƒë∆°n h√†ng:", result.message);
        }
    } catch (error) {
        console.error("Error loading orders:", error);
    }
}

// ‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng
async function confirmOrder(id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√°c nh·∫≠n ƒë∆°n h√†ng n√†y?")) return;

    try {
        const response = await fetch(CONFIRM_API + id, { method: "PUT" });
        const result = await response.json();

        if (result.code === 1000) {
            alert("‚úÖ X√°c nh·∫≠n th√†nh c√¥ng!");
            loadOrders();
        } else {
            alert("‚ö†Ô∏è X√°c nh·∫≠n th·∫•t b·∫°i: " + result.message);
        }
    } catch (error) {
        console.error("Error confirming order:", error);
    }
}

// üÜï Th√™m h√†m t·ª´ ch·ªëi ƒë∆°n h√†ng (API reject)
async function rejectOrder(id) {
    if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën t·ª´ ch·ªëi ƒë∆°n h√†ng n√†y?")) return;

    try {
        const response = await fetch(REJECT_API + id, { method: "PUT" });
        const result = await response.json();

        if (result.code === 1000) {
            alert("‚ùå T·ª´ ch·ªëi th√†nh c√¥ng!");
            loadOrders();
        } else {
            alert("‚ö†Ô∏è T·ª´ ch·ªëi th·∫•t b·∫°i: " + result.message);
        }
    } catch (error) {
        console.error("Error rejecting order:", error);
    }
}

// ‚úÖ Xem chi ti·∫øt ƒë∆°n h√†ng
function viewDetail(orderId) {
    fetch(`/order/detail/${orderId}`)
        .then(res => res.json())
        .then(data => {
            if (data.code === 1000) {
                const tbody = document.querySelector("#detailTable tbody");
                tbody.innerHTML = "";

                data.data.forEach(item => {
                    const row = `
                        <tr>
                            <td>${item.bookName}</td>
                            <td>${item.authorship}</td>
                            <td>${item.bookGerne}</td>
                            <td>${item.bookPublisher}</td>
                            <td>${item.quantity}</td>
                            <td>${item.price} ƒë</td>
                        </tr>`;
                    tbody.innerHTML += row;
                });

                document.getElementById("detailModal").style.display = "block";
            } else {
                alert("Kh√¥ng t·∫£i ƒë∆∞·ª£c chi ti·∫øt ƒë∆°n h√†ng!");
            }
        })
        .catch(error => console.error("Error loading order details:", error));
}

// ‚úÖ ƒê√≥ng modal chi ti·∫øt
function closeDetailModal() {
    document.getElementById("detailModal").style.display = "none";
}

// ‚úÖ ƒê√≥ng modal khi click ra ngo√†i
window.onclick = function(event) {
    const modal = document.getElementById("detailModal");
    if (event.target === modal) {
        modal.style.display = "none";
    }
}

// ‚úÖ G·ªçi l·∫ßn ƒë·∫ßu khi trang load
loadOrders();
