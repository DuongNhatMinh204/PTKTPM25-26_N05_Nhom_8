// JS g·ªëc cho ƒë∆°n h√†ng, th√™m JS cho inventory v√† logs v√†o c√πng file

// Ch·ª©c nƒÉng Tabs
function showTab(tabId) {
    const tabs = document.querySelectorAll('.tab-content');
    tabs.forEach(tab => tab.style.display = 'none');
    document.getElementById(tabId).style.display = 'block';

    const btns = document.querySelectorAll('.tab-btn');
    btns.forEach(btn => btn.classList.remove('active'));
    event.target.classList.add('active');

    // Load d·ªØ li·ªáu t∆∞∆°ng ·ª©ng n·∫øu c·∫ßn
    if (tabId === 'orders') loadOrders();
    if (tabId === 'inventory') loadBooks();
    if (tabId === 'logs') loadAllLogs();
}

// Ph·∫ßn ƒê∆°n H√†ng ƒê√£ Duy·ªát (gi·ªØ nguy√™n)
const ORDERS_API = "http://localhost:8080/api/librarian/orders";

async function loadOrders() {
    const response = await fetch(`${ORDERS_API}/approved`);
    const orders = await response.json();

    const container = document.getElementById("orders-container");
    container.innerHTML = "";

    orders.forEach(order => {
        const div = document.createElement("div");
        div.className = "order";

        const user = order.user;
        const date = order.orderDate ? new Date(order.orderDate).toLocaleString("vi-VN") : "Ch∆∞a c√≥ ng√†y";

        let booksHtml = "";
        if (order.bookOrders && order.bookOrders.length > 0) {
            booksHtml = order.bookOrders.map(bo =>
                `<div class="book-item">üìò ${bo.book.bookName} x ${bo.quantity}</div>`
            ).join("");
        } else {
            booksHtml = "<em>Ch∆∞a c√≥ s√°ch trong ƒë∆°n</em>";
        }

        div.innerHTML = `
            <div class="order-header">
                <strong>M√£ ƒë∆°n:</strong> ${order.id} |
                <strong>Ng√†y ƒë·∫∑t:</strong> ${date} |
                <strong>Tr·∫°ng th√°i:</strong> ${order.orderStatus}
            </div>

            <div><strong>Kh√°ch h√†ng:</strong> ${user.fullName} - ${user.phone} - ${user.email}</div>
            <div><strong>ƒê·ªãa ch·ªâ giao h√†ng:</strong> ${order.address}</div>
            <div><strong>H√¨nh th·ª©c thanh to√°n:</strong> ${order.paymentType}</div>
            <div><strong>T·ªïng ti·ªÅn:</strong> ${order.totalPrice.toLocaleString()} VND</div>

            <div class="order-books">${booksHtml}</div>

            <div>
                <button class="confirm-btn" onclick="confirmOrder('${order.id}')">X√°c nh·∫≠n</button>
                <button class="cancel-btn" onclick="cancelOrder('${order.id}')">H·ªßy ƒë∆°n</button>
            </div>
        `;

        container.appendChild(div);
    });
}

async function confirmOrder(orderId) {
    const response = await fetch(`${ORDERS_API}/${orderId}/confirm`, {
        method: "PUT"
    });

    if (response.ok) {
        alert("‚úÖ ƒê√£ x√°c nh·∫≠n ƒë∆°n h√†ng!");
        loadOrders();
    } else {
        alert("‚ùå Kh√¥ng th·ªÉ x√°c nh·∫≠n!");
    }
}

async function cancelOrder(orderId) {
    const reason = prompt("Nh·∫≠p l√Ω do h·ªßy ƒë∆°n:");
    if (!reason) return;

    const response = await fetch(`${ORDERS_API}/${orderId}/cancel`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ cancelReason: reason })
    });

    if (response.ok) {
        alert("‚ùå ƒê√£ h·ªßy ƒë∆°n h√†ng!");
        loadOrders();
    } else {
        alert("H·ªßy ƒë∆°n h√†ng th·∫•t b·∫°i!");
    }
}

// Ph·∫ßn Qu·∫£n L√Ω Kho S√°ch (c·∫≠p nh·∫≠t t·ªìn kho, th√™m/b·ªõt)
const BOOKS_API = "http://localhost:8080/api/storekeeper/books";

async function loadBooks() {
    const response = await fetch(BOOKS_API);
    const books = await response.json();

    const container = document.getElementById("books");
    container.innerHTML = "";

    books.forEach(book => {
        const div = document.createElement("div");
        div.className = "book";

        div.innerHTML = `
            <div class="book-header">
                <strong>M√£ s√°ch:</strong> ${book.id} |
                <strong>T√™n s√°ch:</strong> ${book.bookName} |
                <strong>S·ªë l∆∞·ª£ng hi·ªán t·∫°i:</strong> ${book.quantity || 0}
            </div>

            <div><strong>T√°c gi·∫£:</strong> ${book.author || "Ch∆∞a c√≥"}</div>
            <div><strong>Th·ªÉ lo·∫°i:</strong> ${book.genre || "Ch∆∞a c√≥"}</div>
            <div><strong>Gi√°:</strong> ${book.price ? book.price.toLocaleString() : 0} VND</div>

            <div>
                <button class="increase-btn" onclick="increaseQuantity('${book.id}')">TƒÉng s·ªë l∆∞·ª£ng</button>
                <button class="decrease-btn" onclick="decreaseQuantity('${book.id}')">Gi·∫£m s·ªë l∆∞·ª£ng</button>
            </div>
        `;

        container.appendChild(div);
    });
}

async function increaseQuantity(bookId) {
    const qty = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn tƒÉng (l·ªõn h∆°n 0):"));
    if (isNaN(qty) || qty <= 0) {
        alert("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const response = await fetch(`${BOOKS_API}/${bookId}/add`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ quantity: qty })
    });

    if (response.ok) {
        alert("‚úÖ ƒê√£ tƒÉng s·ªë l∆∞·ª£ng s√°ch!");
        loadBooks();
    } else {
        alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t!");
    }
}

async function decreaseQuantity(bookId) {
    const qty = parseInt(prompt("Nh·∫≠p s·ªë l∆∞·ª£ng c·∫ßn gi·∫£m (l·ªõn h∆°n 0):"));
    if (isNaN(qty) || qty <= 0) {
        alert("‚ùå S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá!");
        return;
    }

    const response = await fetch(`${BOOKS_API}/${bookId}/subtract`, {
        method: "PUT",
        headers: {
            "Content-Type": "application/json"
        },
        body: JSON.stringify({ quantity: qty })
    });

    if (response.ok) {
        alert("‚úÖ ƒê√£ gi·∫£m s·ªë l∆∞·ª£ng s√°ch!");
        loadBooks();
    } else {
        alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t!");
    }
}

// Ph·∫ßn L·ªãch S·ª≠ Log Kho
const LOGS_API = "http://localhost:8080/api/storekeeper/warehouse-logs";

async function loadAllLogs() {
    const response = await fetch(LOGS_API);
    const logs = await response.json();

    displayLogs(logs);
}

async function loadLogsByBook() {
    const bookId = document.getElementById("bookIdInput").value.trim();
    if (!bookId) {
        alert("‚ùå Vui l√≤ng nh·∫≠p m√£ s√°ch!");
        return;
    }

    const response = await fetch(`${LOGS_API}/book/${bookId}`);
    const logs = await response.json();

    displayLogs(logs);
}

function displayLogs(logs) {
    const container = document.getElementById("logs-container");
    container.innerHTML = "";

    if (logs.length === 0) {
        container.innerHTML = "<em>Ch∆∞a c√≥ log n√†o</em>";
        return;
    }

    logs.forEach(log => {
        const div = document.createElement("div");
        div.className = "log";

        const date = log.date ? new Date(log.date).toLocaleString("vi-VN") : "Ch∆∞a c√≥ ng√†y";

        div.innerHTML = `
            <div class="log-header">
                <strong>M√£ log:</strong> ${log.id} |
                <strong>Ng√†y:</strong> ${date} |
                <strong>Lo·∫°i:</strong> ${log.type || "Ch∆∞a x√°c ƒë·ªãnh"}
            </div>

            <div><strong>M√£ s√°ch:</strong> ${log.book ? log.book.id : "Ch∆∞a c√≥"}</div>
            <div><strong>S·ªë l∆∞·ª£ng:</strong> ${log.quantity || 0}</div>
            <div><strong>Ghi ch√∫:</strong> ${log.note || "Kh√¥ng c√≥"}</div>
        `;

        container.appendChild(div);
    });
}

// Load ƒë∆°n h√†ng m·∫∑c ƒë·ªãnh khi trang m·ªü
loadOrders();