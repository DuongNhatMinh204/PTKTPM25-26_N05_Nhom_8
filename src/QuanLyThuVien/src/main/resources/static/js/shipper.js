const API_URL = "http://localhost:8080/api/shipper/get-book-order";
const BASE_API = "http://localhost:8080/api/shipper";
const userId = localStorage.getItem("userId");

if (!userId) {
    alert("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng tin shipper. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
    window.location.href = "/login";
}

async function loadShipperOrders() {
    try {
        const response = await fetch(`${API_URL}?userId=${userId}`);
        const result = await response.json();

        if (!result.data || result.data.length === 0) {
            document.getElementById("orders-container").innerHTML =
                "<em>Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o ƒë∆∞·ª£c giao.</em>";
            return;
        }

        const shipperInfo = result.data[0]?.shipper;
        if (shipperInfo) {
            document.getElementById("shipper-info").innerHTML = `
                <p><strong>T√™n Shipper:</strong> ${shipperInfo.shipperName}</p>
                <p><strong>S·ªë ƒêi·ªán Tho·∫°i:</strong> ${shipperInfo.shipperPhone}</p>
            `;
        }

        const container = document.getElementById("orders-container");
        container.innerHTML = "";

        result.data.forEach(order => {
            const bo = order.bookOrder;

            // ‚úÖ T√πy theo tr·∫°ng th√°i shippingStatus hi·ªÉn th·ªã n√∫t kh√°c nhau
            let actionsHtml = "";
            if (order.shippingStatus === "PENDING") {
                actionsHtml = `
                    <button class="start-btn" onclick="startShipping('${order.id}')">
                        üöö B·∫Øt ƒë·∫ßu giao h√†ng
                    </button>
                `;
            } else if (order.shippingStatus === "SHIPPING") {
                actionsHtml = `
                    <button class="success-btn" onclick="markDelivered('${order.id}')">
                        ‚úÖ X√°c nh·∫≠n th√†nh c√¥ng
                    </button>
                    <button class="fail-btn" onclick="markFailed('${order.id}')">
                        ‚ùå X√°c nh·∫≠n th·∫•t b·∫°i
                    </button>
                `;
            } else {
                actionsHtml = `<em>Tr·∫°ng th√°i: ${order.shippingStatus}</em>`;
            }

            const orderHtml = `
                <div class="order">
                    <div class="order-header">
                        <strong>M√£ Giao H√†ng:</strong> ${order.id} <br>
                        <strong>Tr·∫°ng Th√°i:</strong> ${order.shippingStatus} <br>
                        <strong>Ng√†y Giao:</strong> ${new Date(order.shippingDate).toLocaleString("vi-VN")}
                    </div>

                    <div><strong>ƒê·ªãa Ch·ªâ Giao:</strong> ${order.shippingAddress}</div>
                    <div><strong>Ghi Ch√∫:</strong> ${order.note || "Kh√¥ng c√≥"}</div>
                    
                    ${
                bo
                    ? `
                            <div class="book-order">
                                <strong>ƒê∆°n H√†ng:</strong> ${bo.id}<br>
                                <strong>ƒê·ªãa Ch·ªâ:</strong> ${bo.address}<br>
                                <strong>Thanh To√°n:</strong> ${bo.paymentType}<br>
                                <strong>T·ªïng Ti·ªÅn:</strong> ${bo.totalPrice.toLocaleString()} VND<br>
                                <strong>Tr·∫°ng Th√°i ƒê∆°n:</strong> ${bo.orderStatus}
                            </div>
                        `
                    : "<em>Kh√¥ng c√≥ th√¥ng tin ƒë∆°n h√†ng li√™n k·∫øt.</em>"
            }

                    <div class="actions">${actionsHtml}</div>
                </div>
            `;
            container.insertAdjacentHTML("beforeend", orderHtml);
        });
    } catch (error) {
        console.error("L·ªói t·∫£i ƒë∆°n h√†ng:", error);
        alert("‚ùå Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng!");
    }
}

async function startShipping(shippingId) {
    if (!confirm("üöö X√°c nh·∫≠n b·∫Øt ƒë·∫ßu giao h√†ng ƒë∆°n n√†y?")) return;

    try {
        const response = await fetch(`${BASE_API}/start-shipping?shippingId=${shippingId}`, {
            method: "PUT"
        });
        if (response.ok) {
            alert("‚úÖ ƒê√£ chuy·ªÉn ƒë∆°n sang tr·∫°ng th√°i 'ƒêang giao'!");
            loadShipperOrders();
        } else {
            alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i!");
        }
    } catch (error) {
        console.error(error);
        alert("‚ö†Ô∏è L·ªói k·∫øt n·ªëi server!");
    }
}

async function markDelivered(shippingId) {
    if (!confirm("‚úÖ X√°c nh·∫≠n ƒë∆°n h√†ng ƒë√£ giao th√†nh c√¥ng?")) return;

    try {
        const response = await fetch(`${BASE_API}/delivered?shippingId=${shippingId}`, {
            method: "PUT"
        });
        if (response.ok) {
            alert("üéâ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† 'Th√†nh c√¥ng'!");
            loadShipperOrders();
        } else {
            alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
        }
    } catch (error) {
        console.error(error);
        alert("‚ö†Ô∏è L·ªói k·∫øt n·ªëi server!");
    }
}

// ‚úÖ X√°c nh·∫≠n giao th·∫•t b·∫°i
async function markFailed(shippingId) {
    if (!confirm("‚ùå X√°c nh·∫≠n giao h√†ng th·∫•t b·∫°i?")) return;

    try {
        const response = await fetch(`${BASE_API}/failed?shippingId=${shippingId}`, {
            method: "PUT"
        });
        if (response.ok) {
            alert("üö´ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† 'Th·∫•t b·∫°i'!");
            loadShipperOrders();
        } else {
            alert("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i!");
        }
    } catch (error) {
        console.error(error);
        alert("‚ö†Ô∏è L·ªói k·∫øt n·ªëi server!");
    }
}

loadShipperOrders();
