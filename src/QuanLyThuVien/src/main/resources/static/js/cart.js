// ‚úÖ L·∫•y userId t·ª´ localStorage
const userId = localStorage.getItem("userId");
let cartItems = [];

// üÜï ƒê·ªãnh nghƒ©a s·∫µn API base ƒë·ªÉ d·ªÖ m·ªü r·ªông khi deploy
const BASE_URL = ""; // v√≠ d·ª•: "http://localhost:8080"
const CART_API = `${BASE_URL}/order-temp`;
const ORDER_API = `${BASE_URL}/order/create`;

// üü¢ G·ªçi API l·∫•y gi·ªè h√†ng theo userId
async function fetchCart() {
    try {
        const res = await fetch(`${CART_API}/get-by-user/${userId}`);
        const data = await res.json();

        if (data.code === 1000) {
            cartItems = data.data.map(item => ({
                orderTempId: item.id,
                bookId: item.book_id,
                img: item.bookUrl,
                name: item.bookName,
                price: item.bookPrice,
                quantity: item.bookQuantity,
                total: item.bookTotalPrice
            }));
            renderCart();
        } else {
            alert("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i gi·ªè h√†ng: " + (data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh!"));
        }
    } catch (err) {
        console.error("Error loading cart:", err);
        alert("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
    }
}

// ‚úÖ Render gi·ªè h√†ng ra b·∫£ng
function renderCart() {
    const tbody = document.querySelector("#cartTable tbody");
    tbody.innerHTML = "";

    if (cartItems.length === 0) {
        tbody.innerHTML = `<tr><td colspan="7" style="text-align:center;">üõí Gi·ªè h√†ng tr·ªëng!</td></tr>`;
        document.getElementById("grandTotal").innerText = `T·ªïng c·ªông: 0 ‚Ç´`;
        return;
    }

    cartItems.forEach((item, index) => {
        const row = document.createElement("tr");
        row.innerHTML = `
          <td><input type="checkbox" class="select-item" data-index="${index}"></td>
          <td><img src="${item.img}" alt="${item.name}" width="60"></td>
          <td>${item.name}</td>
          <td>${item.price.toLocaleString()} ‚Ç´</td>
          <td>
            <button onclick="updateQty(${index}, -1)">-</button>
            ${item.quantity}
            <button onclick="updateQty(${index}, 1)">+</button>
          </td>
          <td>${(item.price * item.quantity).toLocaleString()} ‚Ç´</td>
          <td><span class="delete-btn" onclick="removeItem(${index})">üóë</span></td>
        `;
        tbody.appendChild(row);
    });

    updateTotal();
}

// ‚úÖ C·∫≠p nh·∫≠t t·ªïng ti·ªÅn
function updateTotal() {
    const checkboxes = document.querySelectorAll(".select-item:checked");
    let total = 0;

    checkboxes.forEach(cb => {
        const item = cartItems[cb.dataset.index];
        total += item.price * item.quantity;
    });

    document.getElementById("grandTotal").innerText = `T·ªïng c·ªông: ${total.toLocaleString()} ‚Ç´`;
}

// ‚úÖ C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng (client-side + optional API)
async function updateQty(index, delta) {
    const item = cartItems[index];
    const newQty = item.quantity + delta;

    if (newQty <= 0) return;

    // üÜï N·∫øu backend c√≥ API c·∫≠p nh·∫≠t gi·ªè h√†ng th√¨ g·ªçi t·∫°i ƒë√¢y
    try {
        const res = await fetch(`${CART_API}/update/${item.orderTempId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ quantity: newQty })
        });

        const data = await res.json();
        if (data.code === 1000) {
            cartItems[index].quantity = newQty;
            renderCart();
        } else {
            alert("‚ö†Ô∏è C·∫≠p nh·∫≠t th·∫•t b·∫°i: " + (data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"));
        }
    } catch (err) {
        console.error("Error updating quantity:", err);
        alert("‚ùå Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng!");
    }
}

// ‚úÖ X√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè
async function removeItem(index) {
    const item = cartItems[index];
    if (!confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${item.name}" kh·ªèi gi·ªè h√†ng?`)) return;

    try {
        // üÜï G·ªçi API x√≥a (n·∫øu c√≥)
        const res = await fetch(`${CART_API}/delete/${item.orderTempId}`, {
            method: "DELETE"
        });
        const data = await res.json();

        if (data.code === 1000) {
            cartItems.splice(index, 1);
            renderCart();
        } else {
            alert("‚ö†Ô∏è X√≥a th·∫•t b·∫°i: " + (data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh!"));
        }
    } catch (err) {
        console.error("Error removing item:", err);
        alert("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server!");
    }
}

// ‚úÖ Thanh to√°n
async function checkout() {
    const address = document.getElementById("address").value.trim();
    const paymentType = document.getElementById("paymentType").value;

    const selected = Array.from(document.querySelectorAll(".select-item:checked"))
        .map(cb => cartItems[cb.dataset.index]);

    if (selected.length === 0) {
        alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t 1 s·∫£n ph·∫©m ƒë·ªÉ ƒë·∫∑t h√†ng!");
        return;
    }

    if (!address) {
        alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ giao h√†ng!");
        return;
    }

    const payload = {
        userId: userId,
        address: address,
        paymentType: paymentType,
        orderItems: selected.map(item => ({
            bookId: item.bookId,
            quantity: item.quantity,
            orderTempId: item.orderTempId
        }))
    };

    try {
        const res = await fetch(ORDER_API, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        });

        const data = await res.json();
        if (data.code === 1000) {
            alert("üéâ ƒê·∫∑t h√†ng th√†nh c√¥ng!");
            fetchCart(); // reload gi·ªè h√†ng sau khi ƒë·∫∑t
        } else {
            alert("‚ö†Ô∏è C√≥ l·ªói khi ƒë·∫∑t h√†ng: " + (data.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh!"));
        }
    } catch (err) {
        console.error("Checkout error:", err);
        alert("‚ùå L·ªói k·∫øt n·ªëi khi ƒë·∫∑t h√†ng!");
    }
}

// ‚úÖ X·ª≠ l√Ω ch·ªçn t·∫•t c·∫£ / c·∫≠p nh·∫≠t t·ªïng
document.addEventListener("change", (e) => {
    if (e.target.id === "selectAll") {
        document.querySelectorAll(".select-item").forEach(cb => cb.checked = e.target.checked);
        updateTotal();
    } else if (e.target.classList.contains("select-item")) {
        updateTotal();
    }
});

// ‚úÖ Load khi m·ªü trang
fetchCart();
